
---------------------------------------
1. java-project
---------------------------------------

proj
    |
    |
    |---- package1  ( .java / .class )
    |
    |---- package2
    |  |
       |---- package2.1


---------------------------------------
2. .java file
---------------------------------------


----------------------------------------
PublicType.java
----------------------------------------
|// packace declaration (0..1)
|// import statements (0..n)
| 
|// public Type declaration ( interface, class, enum, annotation) (1)
|
|// other types ( interface, class, enum, annotation) (0..n)
|
|----------------------------------------


//----------------------------------------
|3. package declaration 
//----------------------------------------

why we need it?
// 1. to avoid name conflicts
// 2. to control access
// 3. to group related classes
// 4. to make it easier to locate and use classes, interfaces, and sub-packages

syntax:
package package1;


File : TransferService.java
module : upi
company : npci
company-type : public/commercial

e,g package company-type.company-name.module-name;
package com.npci.upi;


//----------------------------------------
|4. import statements
//----------------------------------------

proj:
    |
    |---- package1  ( A , B)
    |
    |---- package2  ( C , D)
    |  |
       |---- package2.1 ( E )



e.g

package package1;
import package2.C;
import package2.D;
//
// import package2.*; // imports all classes in package2
// import package2.package2.1.E; 
public class A{
    B b;
    C c;
    D d;
    E e; 
    package2.1.E e1;
}


//----------------------------------------
object 
//----------------------------------------

    - data / info / props / attributes / fields / variables => State
    - methods / functions / operations  => Behavior
    - address / location / reference => Identity

object = state + behavior + identity ( sbi )

object's template 
    - interface
    - class
    - enum
    - annotation
   

-----------------------------------------
object concepts
-----------------------------------------   

- abstraction ( aka interface | object's front-end)
    why we need it?
    -> easy to use/learn by dependent
    -> for loosely coupled 

- encapsulation ( aka implementation | object's back-end)
    why we need it?
    -> to hide the implementation details
    -> to protect the data from outside world
    -> to control access to the data

- inheritance
    why we need it?
    -> to re-use common state and behavior, 
       from generalized-type to specialized-types

- polymorphism

    why we need it?
    -> object must behave differently based on the context

- composition ( HAS-A relationship)
    why we need it?
    -> to create complex objects from simpler objects
    -> to achieve code reusability
    -> to achieve loose coupling    


-------------------------------------------
5. interface
-------------------------------------------

// top-level type

[public] interface Name [extends super-interface1, super-interface2, ...] {
    // constants (0..n)
    // abstract methods (0..n)
    // default methods (0..n)
    // static methods (0..n)
    // private methods (0..n)
    // nested types (0..n)
}

//-----------------------------------------
// 6. class
//-----------------------------------------

_________ __________ class Name [extends super-class] 
                                [implements interface1, interface2, ...] {
[public]  [abstract]    // variables
[      ]  [final]       // constructors (0..n)
          [strictfp]    // instance methods (0..n)
                         // initializer block (0..n)
                        // nested types (0..n)
--------------------                        
[private]   [static]                     
[protected]
[         ]
[public]              }



//-----------------------------------------
// 7. variables
//-----------------------------------------

why we need it?
// 1. to store data

by type:
- values ( e.g age, salary, height, weight)
    aka primitive data types  ( e.g int, float, char, boolean)
- objects ( e.g person, car, house, bank-account)
   aka reference data types ( e.g class, interface, enum, annotation)

by scope:
- static variables ( aka class variables)
- instance variables ( aka object variables) ( by default)
- local variables ( aka method variables)

e.g

_________ __________ Type varName = value | objectRef;
[public]  [static]
[private] [final]
[proected][transient]
[        ][volatile]


    local-variable
--------------------------
Nil        [final]


------------------------------------------
// 8. methods
//------------------------------------------